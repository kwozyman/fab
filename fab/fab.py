import yaml
import logging
import subprocess
from fab.module import FabModule


class Fab:
    """
    Fabfile definition
    """

    def __init__(self, source, container_tool='/usr/bin/podman', tool_args=""):
        self.source = source
        self.name = source
        self.container_tool = container_tool
        self.tool_args = tool_args
        self.includes = []
        self._read()
        logging.debug('Read Fabfile: {}'.format(self.definition))
        if not self._validate():
            raise Exception('Fabfile not valid')
        self.includes = []
        self._load_includes()

    def _read(self):
        f = open(self.source, 'r')
        self.definition = yaml.load(f, Loader=yaml.Loader)
        f.close()

    def _validate(self):
        is_valid = True
        if not 'metadata' in self.definition:
            logging.warning('No metadata found for fabfile {}. Generating some.'.format(self.source))
            self.definition['metadata'] = {}
            self.definition['metadata']['name'] = self.source
            self.definition['metadata']['description'] = 'Autogenerated'
        else:
            if not 'name' in self.definition['metadata']:
                logging.warning("No name set in fabfile {} metadata. Autosetting to {}".format(self.name, self.name))
                self.definition['metadata']['name'] = self.name
            else:
                self.name = self.definition['metadata']['name']
            if not 'description' in self.definition['metadata']:
                logging.warning("No description set in fabfile {} metadata. Autosetting".format(self.name))
                self.definition['metadata']['description'] = 'Autogenerated'

        if not 'from' in self.definition:
            logging.error('"from" key is required in fabfile')
            is_valid = False

        if not 'include' in self.definition:
            logging.warning('No modules included')
            self.definition['include'] = []

        if 'buildargs' in self.definition:
            if not isinstance(self.definition['buildargs'],list):
                logging.error("'buildargs' is not a list")
                is_valid = False
        else:
            self.definition['buildargs'] = []

        return (is_valid)

    def _load_includes(self):
        for include in self.definition['include']:
            if isinstance(include,str):
                _include = include
                _var_values = {}
            elif isinstance(include, dict):
                _include = include['include']
                if 'buildargs' in include.keys():
                    for item in include['buildargs']:
                        for key in item:
                            _var_values[key] = item[key]
                else:
                    logging.debug('No "buildargs" set for {}'.format(include))
                    _var_values = {}
            logging.debug('Add new module {} with buildargs {}'.format(_include, _var_values))
            self.includes.append(FabModule(source=_include, var_values=_var_values))

    def _run(self, command, args, cwd):
        logging.debug('{} {}'.format(command, args))
        process = subprocess.Popen([command] + args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd)
        while True:
            output = process.stdout.readline().rstrip().decode('utf-8')
            if output == '' and process.poll() is not None:
                break
            if output:
                print('    {}'.format(output.strip()))
        rc = process.poll()
        return rc

    def build(self):
        previous_container_image = self.definition['from']
        print(len(self.includes))
        for module in self.includes:
            tag = '{}-stage-{}'.format(
                self.name,
                module.name)
            podman_args = self.tool_args.split()
            podman_args.append('build')
            podman_args.append('--from')
            podman_args.append(previous_container_image)
            podman_args.append('--file')
            podman_args.append(module.containerfile)
            podman_args.append('--tag')
            podman_args.append(tag)
            for arg in self.definition['buildargs']:
                for key in arg:
                    podman_args.append('--build-arg')
                    podman_args.append('{}={}'.format(key, arg[key]))
            logging.debug('podman command: {}'.format(podman_args))
            logging.info('Start build of {} stage'.format(tag))
            self._run(self.container_tool, podman_args, module.working_dir)
            previous_container_image = tag
        podman_args = self.tool_args.split()
        podman_args.append('tag')
        podman_args.append(previous_container_image)
        podman_args.append(self.name)
        self._run(self.container_tool, podman_args, None)
